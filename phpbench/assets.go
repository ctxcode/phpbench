// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/inject.php
// templates/overview.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsInjectPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4b\x6f\xda\x40\x10\xbe\xf3\x2b\xbe\x03\xaa\x9d\x8a\x80\x69\x0f\x95\xa0\x4e\xd5\x52\x52\x55\x42\x09\x32\x70\x42\x08\x6d\xd7\xd3\xd8\x12\xde\x75\x77\xc6\x7d\x28\xca\x7f\xaf\xd6\x3c\x8c\x5b\xc4\x5e\x56\xc3\xf7\x5a\x66\xc6\xef\x3f\x94\x59\xd9\xe9\xe8\x9d\x62\xc6\x3c\x2b\x3f\x91\xd1\x19\x9e\x3b\x1d\x00\x60\x51\x92\x6b\x74\x25\x2f\xc8\x31\x62\xac\x37\xe3\x3d\x52\x56\xdf\x76\xb9\x3e\x12\xbe\x57\x46\x4b\x6e\x8d\xaf\x9d\x2c\x3d\x3b\xdc\x8b\x6e\xf0\x5c\xf3\x1b\xb7\xd1\xe8\x60\xb7\x0e\x24\x40\xff\x60\xbe\x41\x8c\x22\xd7\xce\xfa\x2a\x14\x57\xd1\xcd\xb8\x16\xbe\x5c\xcd\xf3\xec\x89\x4d\xe9\x90\xd6\x43\x57\xdb\x94\xce\x43\xbb\x64\xd2\x4b\xde\x0d\xc1\xff\xba\x28\xc9\x08\xe2\x9a\x7d\x7b\xf5\x9d\xe3\x93\xb0\x32\x4c\x12\x5e\x25\xb7\x72\x0a\xdf\x40\x67\x2b\x93\x86\x67\x99\xaf\x31\x8c\xa2\xe8\x70\x9d\xf3\x07\x03\x90\xce\x6c\xad\xeb\x23\x28\x38\x68\x83\x5f\x48\xa0\x57\xc9\x0c\x8e\xd8\x56\x4e\x53\x93\xa4\x2b\xb7\x43\x0c\x7f\x6d\x73\x93\x4b\x78\x33\x3e\x57\x2e\x48\xc0\xb6\x20\xd8\xd2\x37\x91\x71\x8b\x5f\x04\xe5\x08\xa5\x62\xce\xcd\x13\x72\x03\x85\x8a\xc9\xa9\x27\xff\x46\xb1\x16\x19\xb9\x26\xa1\x76\x66\x12\x5b\xca\x56\x39\xa7\xfe\x84\x75\x66\x0f\xeb\x13\xc5\x9f\xc9\x2a\x99\x3d\xce\x97\xdb\x64\xba\x5c\x25\x0f\xcb\xe4\xe3\xc3\xe2\x7e\x9a\x20\xbe\xc3\xb0\x77\x91\xe8\xff\x4e\x7c\x87\x20\x13\x29\x47\x83\xc1\xf0\xcd\xbb\x7e\xd4\x8f\xfa\xc3\xd1\xdb\x28\x1a\x0e\x52\x25\x2a\xb8\x2c\x9c\x3f\x2e\x96\x57\x7c\x3d\x7c\xff\x75\x3a\xfb\xbc\xf0\xa4\xf6\x23\xfd\x09\xfc\xd6\x04\x1e\xab\xf7\xa7\xf7\x3f\xa1\xe0\x3d\x5c\x70\x1b\xdc\x34\xe5\xe6\xdf\x2e\x9b\x14\x92\x11\x1c\xfd\xa8\x88\x05\xaf\xc0\xea\xa7\x2f\xb9\xb4\x86\x09\x62\xd1\xf5\x45\x33\x37\x5f\x1d\xe7\x46\xbf\x49\xef\xbb\xda\xb6\x9d\xec\x2c\x37\x9e\x62\xa1\x77\xa4\x1c\xaa\x72\x3f\xd2\xe3\x32\x70\x7b\x56\xda\xab\x4e\x76\xc7\x0f\xeb\xa5\xf3\x37\x00\x00\xff\xff\x48\x30\xa4\x43\xfe\x03\x00\x00")

func assetsInjectPhpBytes() ([]byte, error) {
	return bindataRead(
		_assetsInjectPhp,
		"assets/inject.php",
	)
}

func assetsInjectPhp() (*asset, error) {
	bytes, err := assetsInjectPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/inject.php", size: 1022, mode: os.FileMode(511), modTime: time.Unix(1563181939, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOverviewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\x16\x0a\xbe\x2f\xfd\x89\x25\xb9\x89\xd3\x82\x91\x5d\x14\xed\x31\x41\x0f\xed\x0b\x30\xe2\x4a\x24\xc2\x90\x02\x49\xff\xd5\xf0\xbb\x17\xa4\x25\x8b\x8e\xe5\xb4\x97\x4a\x07\x93\xdc\x9d\x9d\xd9\xf1\x8a\x85\x14\xea\x09\xb8\xc1\x6a\x96\x70\xe7\x1a\x4b\xb2\xac\xd2\xca\xd9\xb4\xd6\xba\x96\x48\x1b\x61\xd3\x52\x3f\x67\xa5\xb5\x9f\x2b\xfa\x2c\xe4\x66\xf6\xbd\x41\xf5\xfe\x07\x55\xf6\x7f\x26\x6c\x23\xe9\x66\x66\x57\xb4\x49\xc0\xa0\x9c\x25\xd6\x6d\x24\x5a\x8e\xe8\x92\xf9\x68\x54\x84\xed\x7c\x04\x00\xf0\xa8\xd9\x06\xb6\x61\xe9\x1f\xcf\x32\xde\x57\x24\x70\xe9\x6b\x82\xaf\x79\x79\x17\x32\x76\xa3\xf0\xe3\xe8\xa3\xc4\x08\xf4\xa8\x0d\x43\x33\xb6\x0d\x2d\x85\xaa\x09\x4c\xee\x5e\x86\x4a\x2d\x25\x6d\x2c\x12\xe8\x56\x51\x0a\x2d\x9f\x6a\xa3\x17\x8a\x11\x58\x71\xe1\xf0\x04\x6d\x28\x13\x0b\x4b\xe0\xa6\x59\xf7\x31\xbd\x44\x53\x49\xbd\x22\xc0\x05\x63\xa8\xfa\xc8\x4a\x30\xc7\x09\x4c\xf2\xfc\xbf\xfe\xf0\x99\x9a\x5a\x28\x02\x39\xd0\x85\xd3\xfd\x79\xa3\xad\x70\x42\x2b\xe2\x8d\xa2\x4e\x2c\x31\xc6\xac\xc7\x6d\xb1\x8f\x79\xde\x91\x1f\x99\xf0\x2e\xb2\xe1\x5c\xa9\x23\x80\x63\x57\xf1\x8e\xc7\x78\xca\x58\xf0\x6f\xda\xac\x61\x32\xcc\xe7\x38\x52\x06\xce\x44\x30\x8e\xa2\xe6\x8e\xc0\x6d\x1e\xdb\x13\xbb\x7a\x71\x7d\x7b\x9d\xdf\xd0\x3e\x58\x6a\xa9\x0d\x81\x8b\xaa\xaa\x86\x38\xc2\x4c\x0c\x72\x4c\xcf\xa8\x6a\x11\xa9\xd3\x8e\xca\x7f\x29\xed\xbc\x7b\x0e\xd7\x6e\x4c\xa5\xa8\x15\x01\x89\x95\x3b\x46\xb7\x02\x89\x72\x7c\x5c\x72\x21\xd9\x1b\x5c\xa2\x7a\x1b\x0f\xf1\x41\xd5\xf8\xa0\x61\xea\xdf\xc1\x42\x2f\x3f\x19\x2b\x7e\x21\x81\xc9\x34\xee\xb3\x2b\xf3\x29\xf7\x6f\x7f\x2e\x85\xc2\x71\x67\xcd\x24\xfd\x70\x77\x5c\x6a\xd5\x46\x16\xca\xe2\x99\x2e\xb8\x1f\xfe\x48\x42\xc7\x34\x0d\xcf\x90\xd3\x83\x3d\x05\xe8\xc2\x58\x1f\x68\xb4\x50\x0e\xcd\xa0\xe7\x69\x79\x75\x70\x3c\x2d\xcf\x78\x5e\x62\x8c\x2f\xb2\xf6\x8e\x19\x15\x01\xb9\xbf\x6c\x8a\x30\xbe\xf3\x03\xbe\x70\xa6\xdf\xb4\x09\xf3\xaf\x9a\x61\x91\x39\x7e\x12\x81\x52\x52\x6b\x67\x49\x99\xcc\xef\xa9\x75\xf0\x60\xff\x94\xf6\x65\x89\x86\xd6\x78\x92\x59\x64\x1d\xb1\x3f\x3f\x48\x2a\x82\xc1\x7d\xda\x76\x6b\xa8\xaa\x11\xd2\x7b\xa1\xd0\xee\x76\xaf\xe9\x66\xf3\xed\x16\x52\xaf\x1d\x76\xbb\x22\x73\xec\x24\x21\xd2\xe5\x53\x7d\x0b\x0f\xf6\xdb\xfe\xae\xfe\x4b\x4c\xdb\xcf\x79\x58\xdf\xd8\x5e\x3f\x2a\x76\x2c\xbb\x2b\x18\x3e\xd4\x64\x80\x4f\x4b\xdb\x50\x35\x4b\xae\x93\x88\xfb\xa7\xcf\x26\xe0\x25\x84\xe5\x2b\xbc\x45\xd6\x9a\x58\x64\xed\x1f\x3f\xfa\x1d\x00\x00\xff\xff\xe1\xf0\xbd\x2b\xce\x06\x00\x00")

func templatesOverviewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesOverviewHtml,
		"templates/overview.html",
	)
}

func templatesOverviewHtml() (*asset, error) {
	bytes, err := templatesOverviewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/overview.html", size: 1742, mode: os.FileMode(511), modTime: time.Unix(1563182259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/inject.php":       assetsInjectPhp,
	"templates/overview.html": templatesOverviewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"inject.php": &bintree{assetsInjectPhp, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"overview.html": &bintree{templatesOverviewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
