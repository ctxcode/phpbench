// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/inject.php
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsInjectPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x8f\xda\x3c\x10\xbe\xe7\x57\x3c\x07\xf4\x26\xbc\x62\x21\xb4\x87\x4a\xd0\xb0\x6a\x29\x5b\x55\x42\xbb\x28\xc0\x09\x21\xe4\x3a\xd3\x4d\x24\x62\xbb\xf6\xa4\x1f\x5a\xed\x7f\xaf\x1c\x3e\x42\x5a\x84\x2f\xd1\xe4\xf9\x72\x66\x26\xef\xef\x4d\x6e\x82\x40\xee\x85\x73\x58\xe4\xe6\x23\x29\x99\xe3\x25\x08\x00\xc0\xb1\xe0\x42\xa2\xc3\x45\x49\xd6\x21\xc1\x66\x3b\x3e\x20\xa6\xfa\xba\x2f\xe4\x89\xf0\xad\x52\x92\x0b\xad\x7c\x6d\x79\xe5\xd9\xd1\x41\xd4\xc5\x4b\xcd\x6f\xdc\x46\xa3\xa3\xdd\x26\xe4\x10\xfd\xa3\xf9\x16\x09\xca\x42\x5a\xed\xab\x88\x6d\x45\xdd\x71\x2d\x7c\xbd\x99\xe7\xd9\x53\x9d\xd1\x31\xad\x87\x8e\xd4\x19\x5d\x86\x76\x48\x65\xd7\xbc\x1b\x82\x7f\xbb\x34\xa4\x18\x49\xcd\xbe\xbb\x79\xcf\xf1\x59\x58\x29\x47\x1c\xdd\x24\xb7\x72\x4a\xdf\x40\xab\x2b\x95\x45\x17\x99\xff\x63\x18\xc7\xf1\x25\x71\x30\x00\xc9\x5c\xd7\x82\x3e\xc2\xd2\x85\x6d\xf0\x33\x31\xe4\x3a\x9d\xc3\x92\xd3\x95\x95\xd4\x44\xc8\xca\xee\x91\xc0\x3f\x76\x85\x2a\x38\xea\x8e\x2f\x95\x4b\x62\x38\x5d\x12\xb4\xf1\xdd\x73\xb8\xc3\x4f\x82\xb0\x04\x23\x9c\x2b\xd4\x33\x0a\x05\x81\xca\x91\x15\xcf\xfe\x72\xac\x35\x72\xb2\x4d\x42\xed\xec\x88\xb5\xe1\x9d\xb0\x56\xfc\x8e\xea\xcc\x1e\x36\x67\x8a\x3f\xd3\x75\x3a\x7f\x5a\xac\x76\xe9\x6c\xb5\x4e\x1f\x57\xe9\x87\xc7\xe5\xc3\x2c\x45\x32\xc1\xb0\x77\x95\xe8\x3f\x27\x99\x20\xcc\x99\xcd\x68\x30\x18\xbe\x79\xd7\x8f\xfb\x71\x7f\x38\x7a\x1b\xc7\xc3\x41\x26\x58\x84\xd7\x85\x8b\xa7\xe5\xea\x86\xaf\x87\x1f\xbe\xcc\xe6\x9f\x96\x9e\xd4\xbe\xa4\x3f\xa1\x5f\x97\xd0\x63\xf5\xe2\xf4\xfe\x25\x94\xee\x00\x97\xae\x0d\x6e\x9b\x72\xfb\x77\x97\x55\x06\xce\x09\x96\xbe\x57\xe4\x18\xff\xc1\x89\x1f\xbe\x74\x46\x2b\x47\x60\x8d\x8e\x2f\x9a\xb9\xf9\xea\x34\x37\xfa\x45\xf2\xd0\xd5\xb6\xed\x74\xaf\x5d\xe3\xc9\x1a\x72\x4f\xc2\xa2\x32\x87\x91\x9e\x96\xc1\xb5\x67\x25\xbd\xea\x6c\x77\xfa\xa3\x5e\x83\xe0\x7e\xf2\x27\x00\x00\xff\xff\xae\xf9\x22\x3c\xfa\x03\x00\x00")

func assetsInjectPhpBytes() ([]byte, error) {
	return bindataRead(
		_assetsInjectPhp,
		"assets/inject.php",
	)
}

func assetsInjectPhp() (*asset, error) {
	bytes, err := assetsInjectPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/inject.php", size: 1018, mode: os.FileMode(511), modTime: time.Unix(1562782287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/inject.php": assetsInjectPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"inject.php": &bintree{assetsInjectPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
