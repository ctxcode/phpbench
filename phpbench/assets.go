// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/inject.php
// templates/overview.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsInjectPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4b\x6f\xda\x40\x10\xbe\xf3\x2b\xbe\x03\xaa\x9d\x8a\x80\x69\x0f\x95\xa0\x4e\xd5\x52\x52\x55\x42\x09\x32\x70\x42\x08\x6d\xd7\xd3\xd8\x12\xde\x75\x77\xc6\x7d\x28\xca\x7f\xaf\xd6\x3c\x8c\x5b\xc4\x5e\xac\xf1\xf7\x5a\xcf\x8c\xdf\x7f\x28\xb3\xb2\xd3\xd1\x3b\xc5\x8c\x79\x56\x7e\x22\xa3\x33\x3c\x77\x3a\x00\xc0\xa2\x24\xd7\xe8\x4a\x5e\x90\x63\xc4\x58\x6f\xc6\x7b\xa4\xac\xbe\xed\x72\x7d\x24\x7c\xaf\x8c\x96\xdc\x1a\x5f\x3b\x59\x7a\x76\xb8\x17\xdd\xe0\xb9\xe6\x37\x6e\xa3\xd1\xc1\x6e\x1d\x48\x80\xfe\xc1\x7c\x83\x18\x45\xae\x9d\xf5\x55\x28\xae\xa2\x9b\x71\x2d\x7c\xb9\x9a\xe7\xd9\x13\x9b\xd2\x21\xad\x87\xae\xb6\x29\x9d\x87\x76\xc9\xa4\x97\xbc\x1b\x82\x7f\xbb\x28\xc9\x08\xe2\x9a\x7d\x7b\xf5\x9e\xe3\x93\xb0\x32\x4c\x12\x5e\x25\xb7\x72\x0a\xdf\x40\x67\x2b\x93\x86\x67\x99\xaf\x31\x8c\xa2\xe8\x9c\x38\x18\x80\x74\x66\x6b\x41\x1f\x41\xc1\x41\x1b\xfc\x42\x02\xbd\x4a\x66\x70\xc4\xb6\x72\x9a\x9a\x08\x5d\xb9\x1d\x62\xf8\xc7\x36\x37\xb9\x84\x37\xe3\x73\xe5\x82\x04\x6c\x0b\x82\x2d\x7d\xf7\x18\xb7\xf8\x45\x50\x8e\x50\x2a\xe6\xdc\x3c\x21\x37\x50\xa8\x98\x9c\x7a\xf2\x97\x13\x6b\x91\x91\x6b\x12\x6a\x67\x26\xb1\xa5\x6c\x95\x73\xea\x4f\x58\x67\xf6\xb0\x3e\x51\xfc\x99\xac\x92\xd9\xe3\x7c\xb9\x4d\xa6\xcb\x55\xf2\xb0\x4c\x3e\x3e\x2c\xee\xa7\x09\xe2\x3b\x0c\x7b\x17\x89\xfe\x73\xe2\x3b\x04\x99\x48\x39\x1a\x0c\x86\x6f\xde\xf5\xa3\x7e\xd4\x1f\x8e\xde\x46\xd1\x70\x90\x2a\x51\xc1\x65\xe1\xfc\x71\xb1\xbc\xe2\xeb\xe1\xfb\xaf\xd3\xd9\xe7\x85\x27\xb5\x2f\xe9\x4f\xe0\xd7\x25\xf0\x58\xbd\x38\xbd\xff\x09\x05\xef\xe1\x82\xdb\xe0\xa6\x29\x37\xff\x76\xd9\xa4\x90\x8c\xe0\xe8\x47\x45\x2c\x78\x05\x56\x3f\x7d\xc9\xa5\x35\x4c\x10\x8b\xae\x2f\x9a\xb9\xf9\xea\x38\x37\xfa\x4d\x7a\xdf\xd5\xb6\xed\x64\x67\xb9\xf1\x14\x0b\xbd\x23\xe5\x50\x95\xfb\x91\x1e\x97\x81\xdb\xb3\xd2\x5e\x75\xb2\x3b\xfe\x51\x2f\x9d\xbf\x01\x00\x00\xff\xff\x98\x81\xd0\x6b\xf7\x03\x00\x00")

func assetsInjectPhpBytes() ([]byte, error) {
	return bindataRead(
		_assetsInjectPhp,
		"assets/inject.php",
	)
}

func assetsInjectPhp() (*asset, error) {
	bytes, err := assetsInjectPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/inject.php", size: 1015, mode: os.FileMode(511), modTime: time.Unix(1562787405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOverviewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\x06\x0e\xee\xcd\xbd\x6d\xf4\x70\x53\xa7\x01\x23\xbb\x28\xba\x4d\xd0\x45\xbf\x80\x11\x47\x22\x11\x86\x14\xc8\xb1\x1d\xd7\xf0\xbf\x17\x94\x25\x8b\x8e\x95\x3e\xa4\x85\x45\xce\x79\xcc\x1c\xd1\x2a\xb4\x32\x4f\x20\x1d\x56\x8b\xa9\x24\x6a\x3c\xcb\xb2\xca\x1a\xf2\x69\x6d\x6d\xad\x91\x37\xca\xa7\xa5\x7d\xce\x4a\xef\x3f\x57\xfc\x59\xe9\xed\xe2\x5b\x83\xe6\xfd\x77\x6e\xfc\xbf\x42\xf9\x46\xf3\xed\xc2\x6f\x78\x33\x05\x87\x7a\x31\xf5\xb4\xd5\xe8\x25\x22\x4d\x97\x93\x49\xd1\x2e\x97\x13\x00\x80\x47\x2b\xb6\xb0\x6b\x1f\xc3\x15\x5c\x92\x83\x22\x83\xcb\xa0\x09\x41\xf3\xf2\xae\x45\xec\x27\xed\x0f\xf1\x47\x8d\x11\xe9\xd1\x3a\x81\x2e\xf1\x0d\x2f\x95\xa9\x19\xcc\xee\x5e\x97\x4a\xab\x35\x6f\x3c\x32\xe8\x9f\x22\x08\x2f\x9f\x6a\x67\x57\x46\x30\xd8\x48\x45\x78\xc6\x76\x5c\xa8\x95\x67\x30\xcb\x9b\x97\xa1\x68\xd7\xe8\x2a\x6d\x37\x0c\xa4\x12\x02\xcd\x50\xd9\x28\x41\x32\xc0\xf3\x7f\x86\xcd\x67\xee\x6a\x65\x18\xe4\xc0\x57\x64\x87\xfd\xc6\x7a\x45\xca\x1a\x16\x92\xe2\xa4\xd6\x18\x73\x5e\x92\x4e\xec\x53\x7e\x34\x3f\x49\xe1\x5d\x94\xc3\x5b\x52\x27\x04\x12\x57\xf1\x4a\xc6\x7c\x2e\x84\x32\x75\xa2\xb1\x22\x06\xb7\xa3\x7e\x24\x91\x0b\x20\x17\xd1\x24\xaa\x5a\x12\x83\x9b\x93\x78\xe2\x58\x2f\xae\x6f\xae\xf3\x8f\x7c\x28\x96\x56\x5b\xc7\xe0\xa2\xaa\xaa\x31\x8f\xf6\x50\x8c\x7a\xcc\xc7\x53\xe8\x19\x4c\x73\x4f\x49\x29\x95\x16\x67\xe7\x83\x41\xfe\x77\x71\x10\xbe\x50\xc2\xb5\xaa\x0d\x83\x10\xc9\x29\xbb\x77\x34\x24\x0f\x86\xff\xe1\x1a\xcd\xff\xb1\xed\x31\x81\xe4\x38\xef\x3c\xdc\xa3\x42\xaf\xff\x04\x5e\xfd\x40\x06\xb3\x79\x9c\x69\x2f\x73\x9b\x87\x7b\xd8\xd7\xca\x60\xd2\x47\x34\x4b\x3f\xdc\x9d\x4a\x6d\xba\xca\xca\x78\x7c\x63\x0a\x19\x4e\x73\xd4\x42\xef\x34\x6f\xaf\xb1\xb7\x3a\x3a\x53\x4b\x5d\x39\x1f\x0a\x8d\x55\x86\xd0\x8d\x66\x9e\x96\x57\xc7\xc4\xd3\xf2\x8d\xcc\x4b\x8c\xf9\x45\xd6\x7d\x35\x26\x45\xcb\x3c\x7c\x3e\x8a\xf6\x3c\x2e\x8f\xfc\x82\xdc\xb0\xe8\x00\xcb\xaf\x56\x60\x91\x91\x3c\xab\x40\xa9\xb9\xf7\x8b\x69\x39\x5d\xde\x73\x4f\xf0\xe0\x7f\x07\xfb\xb2\x46\xc7\x6b\x3c\x43\x16\x59\x6f\x1c\xf6\x8f\x2d\x15\x6d\xc0\x03\x6c\xb7\x73\xdc\xd4\x08\xe9\xbd\x32\xe8\xf7\xfb\x5f\xf5\x2d\x96\xbb\x1d\xa4\xa1\x77\xd8\xef\x8b\x8c\xc4\x19\x20\xea\x2b\x40\xc3\x08\x0f\xfe\x0f\xc1\xdd\x20\x23\xf8\x61\x94\x43\xc7\x68\x44\xd7\x68\x91\x75\xe3\x14\x59\xf7\x0a\x7e\x06\x00\x00\xff\xff\xbc\x7e\x74\xc7\x29\x06\x00\x00")

func templatesOverviewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesOverviewHtml,
		"templates/overview.html",
	)
}

func templatesOverviewHtml() (*asset, error) {
	bytes, err := templatesOverviewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/overview.html", size: 1577, mode: os.FileMode(511), modTime: time.Unix(1562784132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/inject.php":       assetsInjectPhp,
	"templates/overview.html": templatesOverviewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"inject.php": &bintree{assetsInjectPhp, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"overview.html": &bintree{templatesOverviewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
