// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/inject.php
// templates/overview.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsInjectPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\x51\x6f\xda\x30\x10\xc7\xdf\xf9\x14\xff\x49\x68\x49\x27\x1a\xc2\xf6\x30\x09\x96\x4e\x5b\xd7\x4e\x93\x2a\x8a\x02\x3c\x21\x84\x3c\xe7\x68\xac\x25\x76\x66\x3b\xdb\xaa\x8a\xef\x3e\x39\x21\x84\x14\x04\x2f\xe1\x72\xbf\xfb\xdf\xd9\x77\x97\x4f\x9f\x8b\xb4\xe8\xf5\x78\xc6\x8c\xc1\x2c\x2d\xbe\x92\xe4\x29\x5e\x7a\x3d\x00\x30\x96\x59\xc1\xd1\x37\x64\xa7\x1a\x11\x64\x99\x65\x93\x8e\xc7\x8a\x9c\xb4\x41\x84\xd5\x7a\x52\xc7\x14\xe5\xcf\x4c\xf0\x06\xd8\x96\x92\x5b\xa1\xa4\xb3\xb5\x5d\x38\xda\xaf\x83\xae\xf0\x52\xf1\xad\xda\x78\xbc\x97\x5b\x79\xd6\x43\xb0\x17\x5f\x23\x42\x2e\xb8\x56\xce\xf2\xad\x2e\xe9\xaa\x2e\x61\x77\x31\x9f\xa3\x6f\x55\x42\xfb\x6c\x03\xf4\xb7\x22\x23\xc9\x72\x1a\xa0\x9f\x09\x49\x53\xf7\x8e\xab\x84\x8e\x0b\xe9\x93\x4c\xce\xe5\x6b\x01\xf7\x76\x5e\x90\xb4\x88\x2a\xfa\xfa\x62\xed\x93\x43\x60\x29\x0d\x59\xff\x22\xdc\xc9\x93\xbb\x4b\xd5\xaa\x94\x89\x7f\x94\xf3\x1d\x46\x61\x18\xee\x1f\xc7\xbc\xd8\xc2\x7f\x73\x50\xaf\xfa\x75\x7c\xae\xce\x25\x37\xdd\xdc\x66\x4a\x69\xff\xd5\x59\x1b\x6d\x04\xf0\xbc\xb6\xfc\x5d\x9b\x6a\x38\x04\xf1\x54\x55\x25\x06\xf0\x72\xe3\x4d\x3a\xce\xef\x64\xc1\x97\xf1\x03\x34\x19\x55\x6a\x4e\xed\xa1\x78\xa9\x33\x44\x70\x8f\x8d\x90\xc2\xfa\x57\x93\xe3\xc8\x39\x59\x18\x95\x13\x54\xe1\x7a\x68\x70\x8d\xbf\x04\xa6\x09\x05\x33\x46\xc8\x27\x08\x09\x86\xd2\x90\x66\x4f\xee\x3a\xac\x52\x48\x49\xb7\x19\x2a\x65\x43\x56\x15\x76\xc3\xb4\x66\xcf\x7e\x95\x73\x80\x55\xe7\x2a\x6e\x97\xf1\xc3\xe3\x6c\xb1\x89\xef\x16\xcb\x78\xba\x88\xbf\x4c\xe7\xf7\x77\x31\xa2\x1b\x8c\x06\x67\x41\x77\x9c\xe8\x06\x5e\x6a\x6d\x31\x1e\x0e\x47\xef\x3f\x06\x61\x10\x06\xa3\xf1\x87\x30\x1c\x0d\x13\x66\x99\x77\x3e\x70\xf6\x38\x5f\x5c\xd0\x75\xee\xfb\x1f\x77\x0f\xdf\xe6\x0e\xea\x16\xe9\x7e\x5e\x33\xb4\x9e\xf3\xb7\x23\x7c\x0a\x56\x4d\xad\xa8\x6e\x9f\xcf\xa0\xbf\xe8\xb9\x96\xab\x37\xe3\x14\xa8\xd7\xa3\x66\xf6\xab\x72\x0a\xb9\xd5\xa9\x11\xf7\xef\x0c\x90\x9b\xda\x9d\x9b\xae\x73\xdd\x9a\xeb\xd7\xfd\x97\x09\x6c\x4a\xd0\xf4\xbb\x24\x63\xf1\x16\x86\xfd\x71\xa6\x29\x94\x34\x04\xab\xd0\x77\x46\x3b\x51\xce\x6a\x26\x8a\xfe\x11\xaf\xfb\xdd\x95\xbd\xcd\x94\x69\x35\xad\x02\xcf\x88\x69\x94\x45\x3d\x6c\xcd\x98\x9a\xee\x14\x71\x17\x75\x90\x6b\xbe\x38\xbb\xde\xff\x00\x00\x00\xff\xff\xe3\x71\xad\x23\x31\x05\x00\x00")

func assetsInjectPhpBytes() ([]byte, error) {
	return bindataRead(
		_assetsInjectPhp,
		"assets/inject.php",
	)
}

func assetsInjectPhp() (*asset, error) {
	bytes, err := assetsInjectPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/inject.php", size: 1329, mode: os.FileMode(511), modTime: time.Unix(1563192391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOverviewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xdd\x8f\xda\xb8\x16\x7f\xe7\xaf\xb0\x5c\xdd\x0b\xa3\x0b\x49\x98\x99\x4e\x67\x3c\x64\xae\x56\xfb\x21\x6d\x77\xdb\x91\x76\xaa\x7d\xa1\x3c\x18\xfb\x84\xb8\x18\x3b\xb2\xcd\x57\x11\xff\xfb\xca\x21\x90\x84\x00\xed\xaa\x7d\xdb\xa5\xea\x10\x9f\xcf\xdf\x39\xe7\x67\xe3\x0c\xa4\x50\x53\x94\x1a\x48\x62\x9c\x3a\x97\x59\x12\x86\x89\x56\xce\x06\x13\xad\x27\x12\x68\x26\x6c\xc0\xf4\x2c\x64\xd6\xfe\x3f\xa1\x33\x21\xd7\xf1\x73\x06\xea\x7f\x2f\x54\xd9\xff\x72\x61\x33\x49\xd7\xb1\x5d\xd2\x0c\x23\x03\x32\xc6\xd6\xad\x25\xd8\x14\xc0\xe1\xa7\x56\x6b\x90\x2f\x9f\x5a\x08\x21\x34\xd6\x7c\x8d\x36\xf9\xa3\xff\xf8\x2c\xbd\x5d\x44\x82\xda\x3e\x26\xf2\x31\xdb\x8f\xb9\xc5\xb6\x95\x7f\x05\x56\x70\x18\x53\x53\xba\x65\xda\x0a\x27\xb4\x22\x88\x8e\xad\x96\x73\x07\x8f\x07\xdd\xe7\x9e\x50\x1c\x56\xe4\xa6\x14\x39\x9d\x91\xa8\x5c\x4a\x48\x5c\x75\x3d\xd6\xce\xe9\x59\x55\xb2\x14\xdc\xa5\xe4\x26\x8a\xb2\x55\xc5\x8c\xb2\xe9\xc4\xe8\xb9\xe2\x3d\xa6\xa5\x36\xe4\x15\x00\x54\xa3\xac\x7a\x36\xa5\x5c\x2f\x09\x8a\xb2\x55\xfe\xbf\xff\x3a\x5b\x21\x33\x19\xd3\x4e\xd4\xcd\xff\x05\xfd\xab\x93\xa5\x05\x16\x98\x56\x7c\xd3\xa8\xe2\xfa\x08\x76\x05\xd3\x51\x08\x14\xa4\x40\x39\x54\xba\xd4\x04\xdc\x67\x7d\xf6\xe6\x75\x19\x32\xa3\x9c\x0b\x35\x21\xd7\x7b\xb0\xa5\xaa\xf0\x48\x92\xe4\xb1\x3e\x2d\x2b\x3e\x03\xe9\xdf\x55\x6d\x73\xf9\x12\xc4\x24\x75\x04\x8d\xb5\xe4\xd5\xae\x18\x0e\xa6\x67\x72\x5d\x3f\x5b\x21\xab\xa5\xe0\xe8\xd5\xdd\xc3\xdd\x03\x8d\xce\x14\x22\x1c\xcc\x36\x0d\x90\x79\x33\xeb\x20\x8b\xe8\xc5\x00\x2b\xe1\x19\x63\x95\x52\xe6\xc6\x6a\x43\x50\xa6\x85\x72\x60\xea\x49\x99\x56\x0e\x94\xfb\x7b\xdc\xea\x5f\xe6\xd6\x5d\x9d\x38\xbb\xe2\x8f\x8a\x75\x63\xb9\x39\xaa\x83\x20\xa5\x15\x1c\xb3\xb0\x1f\x45\xff\x69\xb8\x22\xe7\x87\x8d\x5c\xda\x6c\xd3\x6e\x96\x5f\x60\xee\x9b\x87\x37\x87\xf6\x5f\x1a\xd3\x03\x7d\xa0\xec\xe6\x3c\x2b\x6a\x90\xf2\xbd\xed\xf8\x89\xc9\x35\xe9\x75\x2e\x21\xe7\xbc\x91\xed\xfe\xfe\xfe\x7c\xb6\x80\x95\xf9\x1c\xac\x5c\x8f\x4a\x31\x51\x04\x31\x68\xce\xba\xe2\x67\x88\x72\x69\x8f\xa5\x42\xf2\x8e\xe6\xfc\xea\xc2\xae\x41\xe5\x3e\xdf\xb6\x5a\x83\xb0\x38\xcd\x5a\x03\x2e\x16\x48\xf0\x18\xd3\x2c\xc3\xbb\xd3\x2d\x17\x31\x49\xad\x8d\x71\xc1\xe6\x42\x73\xac\xdd\xed\x55\xfc\xf4\x01\xac\xb3\x83\x90\x8b\xc5\x69\x3b\xbf\x15\x30\x5a\xf4\x12\x6d\x62\x6c\xc1\x75\xa7\xb0\x46\x42\x21\x03\x76\x2e\xdd\x0b\x38\xeb\xb5\x5a\x11\x26\x05\x9b\xe6\x26\x2f\xe0\x7e\x83\x75\x67\x0a\xeb\x2b\xfc\x34\x1c\x22\xef\x31\x1a\x55\x72\x14\x8f\xe7\x10\xa3\xdd\x59\xf4\x05\xe0\xbf\x08\x09\xf6\x2b\x82\x16\xfb\xab\x1a\xcd\xd1\xb1\x84\xbd\xde\x8d\x25\x46\x0c\xa4\xb4\x19\x65\x42\x4d\x62\x1c\x55\x6c\x77\xf6\x3e\x67\x5d\xb6\x93\x9b\xa6\xb0\x70\x78\xfa\x51\x73\x18\x84\x2e\x3d\x6f\x31\xb3\x97\xf5\x1f\xc4\x0c\x2c\x62\x54\x4a\xe0\x97\x2d\x7f\x58\x80\xa1\x13\x40\xe7\x22\x0e\xc2\x63\xa4\xde\xae\x51\xd3\x20\xa7\xe6\xb1\x0c\x66\x99\xa4\x0e\xd0\xa2\x27\x92\x18\xb3\xb9\x31\xa0\xfc\x88\xf1\xc9\x86\xec\x99\xc2\xa4\x50\xe0\x79\x52\x3a\x04\xbe\x25\xbf\x0b\x05\xf6\x84\xeb\xce\x9d\x7b\xba\xe4\xae\xb9\x71\xce\x1a\x77\xa2\xf3\x0d\xeb\x77\xf6\xa7\xdd\x25\x00\x8d\x46\x79\x17\x2e\x38\x45\x5f\x19\xb3\xe8\xea\xd7\x84\x3e\xd9\xe0\xa2\x71\x0d\x79\xbd\xc9\x83\x30\x67\x63\x8d\xc3\x7b\x2a\xb7\x06\x96\x19\x91\x39\x64\x0d\x2b\x2f\x46\x8c\xab\xe0\x93\xe5\x20\xc5\xc2\x04\x0a\x5c\xa8\xb2\x59\xb8\x98\x43\xc8\x85\x75\xfe\x21\xf8\x64\xf1\xd3\x20\xdc\xf9\x3e\x1d\xa2\xec\x52\x2c\xa8\xa9\xec\x5d\x14\xa3\xb7\x2f\xcf\xef\x83\x8c\x1a\x0b\x9d\xcd\x06\x05\x7f\x1c\x74\x6f\xad\x56\x68\xbb\x2d\xee\x0b\x61\xd8\x74\xdd\xe0\xfe\xeb\xbb\x9b\xfe\xc3\x6d\x74\x73\x7b\x7f\x7f\x83\xc9\x06\x97\x33\x26\x1b\xdc\xf7\x7f\xfc\x3e\x55\x74\x06\x98\xe0\x70\xa6\x5c\xc8\xc2\xe5\x72\x19\x66\x69\x36\x06\xc5\xd2\x90\xc3\x78\x3e\x09\x1d\x58\x17\xec\x65\xfe\x01\x77\xf3\x50\x98\x60\x2b\x01\xb2\xce\xf5\xd5\x23\xee\x62\x1f\xf9\xbd\xc1\x04\xdf\xe2\x2e\xfe\x59\x39\x23\x7c\x22\x35\x97\xb2\x8b\xdf\x59\x4c\x22\xff\x55\x8c\x2b\x5f\x1d\xcf\x10\x93\x68\xdb\xc5\xd7\xdf\x03\x17\xb0\x54\xa3\x8f\x98\x6b\x05\x1f\x71\x0d\xdc\xdd\x37\x81\xbb\xf9\x1e\xe0\xbc\xaa\x53\x6f\xd9\xc3\x37\xa0\xda\x76\xcb\xc1\xbe\x68\xe3\x80\xef\x43\x7c\xd0\x8e\xca\x3c\xce\xb6\xbb\x67\x43\x3f\xba\xbd\xbd\xbd\xff\x97\x0d\xff\x68\x36\x6c\x1f\x5b\x87\x33\xce\x1f\x1c\x34\xcb\x50\x8c\x14\x2c\xd1\x9f\x73\xe8\x6c\x6a\x87\xa2\x3f\xcb\x66\xc2\x81\xb1\x04\x0d\xdb\xc3\x61\xbb\x8b\xda\xa3\x51\x7b\xd4\xad\x59\x81\x24\xa8\xfd\x8a\x66\x59\xbb\x2e\xe7\xd4\x51\x82\x36\x8d\x43\xb9\x3c\xaa\x48\xe5\xb9\xdb\xb0\x2b\x7f\xa1\x08\xca\xcb\x68\x58\x24\x45\xff\x3d\xbc\xd1\x05\xf5\xaf\x13\xa5\x0d\xf0\xa6\xd5\xb6\xbe\x9c\x81\x4b\x35\xb7\xa7\x40\x1f\xae\x4f\x04\x25\x73\xc5\xfc\x7b\x40\x7e\x91\x6a\x5a\xfa\x8f\x4b\xfd\x7b\xf1\x01\x3f\x8a\x77\x92\xb2\xda\xe1\x14\xd6\xa3\xc7\xf3\xbe\x07\xe8\x28\x46\xc3\x33\x86\x89\x36\x1d\x3f\xc1\xa9\xff\x39\x3f\xca\x58\xfe\xa6\x9f\x41\x88\x8a\xf1\x33\xb9\x07\x77\xca\x79\x38\x3d\x93\xdb\x7f\x44\xd2\xa9\x63\x0d\xf2\x77\xa0\xe7\xa4\xc3\xe4\x41\x78\x85\xe2\x18\xf5\xfa\x17\x50\x34\x6b\x0e\xb2\xb9\x4d\x6b\x41\xce\x83\xd8\x9e\xd4\x34\xa5\xdb\x4b\x73\x67\x06\xa8\xf3\xfc\x38\x8c\xf6\x04\xde\xbc\xd5\xb0\xf6\x13\x79\x1e\x7f\x02\xe6\x02\xbf\xea\x1c\x0d\xf6\x04\x54\x91\x78\xa6\xd8\x61\x34\xba\xc4\x96\xda\xfd\x3c\x37\x6e\x46\x3a\x2a\xe2\xb0\xf2\x77\x81\x56\xe5\x62\xf1\x57\x00\x00\x00\xff\xff\x76\x1e\xd0\xbc\xb7\x11\x00\x00")

func templatesOverviewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesOverviewHtml,
		"templates/overview.html",
	)
}

func templatesOverviewHtml() (*asset, error) {
	bytes, err := templatesOverviewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/overview.html", size: 4535, mode: os.FileMode(511), modTime: time.Unix(1563202468, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/inject.php":       assetsInjectPhp,
	"templates/overview.html": templatesOverviewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"inject.php": &bintree{assetsInjectPhp, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"overview.html": &bintree{templatesOverviewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
